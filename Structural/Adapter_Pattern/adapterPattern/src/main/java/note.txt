Adapter Pattern 适配器模式

结构型模式 作为两个不兼容的接口之间的桥梁，结合了两个独立接口的功能
这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能

介绍
意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作

概述
在适配器模式中引入老人一个被称为适配器的包装类，而他所包装的对象称为适配者，即被适配的类。适配器的实现就是把客户类的请求方法转化为对适配者
的响应接口的调用。当客户类调用适配器方法时，在适配器的内部将调用适配者类的方法，这个过程对客户类是透明的，客户类并不直接访问适配者类
适配器模式可以将一个类的接口和另一个类的接口匹配起来，而无须修改原来的适配者接口和抽象目标类接口

定义
将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器。

根据适配器类和适配者类的关系不同，适配器模式可以分为对象适配器和类适配器，在对象适配器模式中，适配器和适配者之间是关联关系；在类适配器模式中，
适配器和适配者之间是继承（或实现）关系。在实际开发中，对象适配器的使用频率更高

角色
Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类
Adapter（适配器类）：适配器类可以调用另一个接口，作为一个转换器，对Adaptee和target进行适配，适配器类是适配器模式的核心，在对象适配器中，它
通过继承Target并关联一个Adaptee对象是二者产生联系
Adaptee(适配者类)：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，
在某些情况下看你没有适配者类的源代码


类适配器模式和对象适配器模式最大的区别在于适配器和适配者之间的关系不同，对象适配器模式中适配器和适配者之间是关联关系，而类适配器模式中适配器和适配者是继承关系


双向适配器（很少使用）


缺省适配器   Default Adapter Pattern
当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并未接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可以选择
性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法的情况，又称为单接口适配器模式


总结
适配器模式将现有接口转化为客户类所期望的接口，实现了对现有类的复用，它是一种使用频率非常高的设计模式，在软件开发中得以广泛应用，
在Spring等开源框架、驱动程序设计（如JDBC中的数据库驱动程序）中也使用了适配器模式。
优点
1）将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构
2）增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用
3）活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”
缺点
类适配器
1）对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；
2）适配者类不能为最终类，如在Java中不能为final类
3）在Java、C#等语言中，类适配器模式中的目标抽象类只能为接口，不能为类，其使用有一定的局限性
对象适配器
与类适配器模式相比，要在适配器中置换适配者类的某些方法比较麻烦

